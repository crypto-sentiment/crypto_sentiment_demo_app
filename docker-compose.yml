version: '3.9'

services:
  crawler:
    image: basic_image_crawler
    build: crypto_sentiment_demo_app/crawler
    container_name: crypto_sentiment_demo_app-crawler-1
    command: tail -f /dev/null  # a dummy command to keep the container alive
    volumes:
      - ./:/root
    profiles:
      - production
    depends_on:
      - db
    networks:
      - postgres
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.crawler.schedule: "@every 2m"
      ofelia.job-exec.crawler.command: "python3 -m crypto_sentiment_demo_app.crawler.crawler"

  model_inference_api:
    image: basic_image_model_fast_api
    build: crypto_sentiment_demo_app/model_inference_api
    command: uvicorn crypto_sentiment_demo_app.model_inference_api.api.model:app --host model_inference_api --port 8001 --reload
    volumes:
      - ./:/root
    ports:
      - "8001:8001"
    hostname: model_inference_api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://model_inference_api:8001/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    profiles:
      - production
    networks:
      - model_inference

  model_scorer:
    image: basic_image_model_scorer
    build: crypto_sentiment_demo_app/model_scorer
    command: tail -f /dev/null  # a dummy command to keep the container alive
    volumes:
      - ./:/root
    depends_on:
      model_inference_api:
        condition: service_healthy
      crawler:
        condition: service_started
      db:
        condition: service_healthy
    links:
      - model_inference_api
    profiles:
      - production
    networks:
      - model_inference
      - postgres
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.model_scorer.schedule: "@every 2m"
      ofelia.job-exec.model_scorer.command: "python3 -m crypto_sentiment_demo_app.model_scorer.model_scorer"

  data_provider:
    image: basic_image_data_provider
    build: crypto_sentiment_demo_app/data_provider
    command: uvicorn crypto_sentiment_demo_app.data_provider.api:app --host data_provider --port 8002 --reload
    ports:
      - "8002:8002"
    volumes:
      - ./:/root
    hostname: data_provider
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://data_provider:8002/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    profiles:
      - production
    networks:
      - data_provider
      - postgres

  frontend:
    image: basic_image_streamlit
    build: crypto_sentiment_demo_app/frontend
    command: streamlit run crypto_sentiment_demo_app/frontend/streamlit_app.py
    ports:
      - "8501:8501"
    volumes:
      - ./:/root
    depends_on:
      model_inference_api:
        condition: service_healthy
      data_provider:
        condition: service_healthy
    links:
      - model_inference_api
      - data_provider
    profiles:
      - production
    networks:
      - model_inference
      - data_provider

  train:
    image: basic_image_train
    build:
      context: crypto_sentiment_demo_app/train
      args:
        USER_ID: "$USER"
        GROUP_ID: "$GROUP"
      dockerfile: Dockerfile-cpu
    command: python3 crypto_sentiment_demo_app/train/train.py
    volumes:
      - ./:/root
    profiles:
      - train

  label_studio:
    image: basic_image_label_studio
    build: crypto_sentiment_demo_app/label_studio
    container_name: crypto_sentiment_demo_app-label_studio
    hostname: label_studio_api
    ports:
      - "8080:8080"
    volumes:
      - ./:/home/crypto_sentiment_demo_app
    profiles:
      - production
    networks:
      - postgres

  db:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PGDATA: /data/postgres
    volumes:
      - ./volumes/postgres:/data/postgres
      - ./crypto_sentiment_demo_app/database/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - type: tmpfs  # to shut up some permission errors, taken from here https://tinyurl.com/4y773dyv
        target: /var/lib/postgresql/data/pg_stat_tmp
        tmpfs:
          # 256 Mb - beware the default, it's infinity(!)
          size: 268435456
    ports:
      - "8432:5432"
    profiles:
      - production
    networks:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 5

  pgadmin:
      container_name: pgadmin
      image: dpage/pgadmin4
      restart: always
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        PGADMIN_CONFIG_SERVER_MODE: "True"
        PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "True"
      volumes:
        - ./volumes/pgadmin/:/var/lib/pgadmin
        - ./crypto_sentiment_demo_app/database/docker_pgadmin_servers.json:/pgadmin4/servers.json
      ports:
        - "8050:80"
      profiles:
        - production
      networks:
        - postgres
      entrypoint:
        - "/bin/sh"
        - "-c"
        - "/bin/echo 'postgres:5432:*:${POSTGRES_USER}:${POSTGRES_PASSWORD}' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"

  scheduler:
    image: mcuadros/ofelia:latest
    depends_on:
      - crawler
      - model_scorer
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  postgres:
    driver: bridge
  model_inference:
    driver: bridge
  data_provider:
    driver: bridge

volumes:
  postgres:
