version: '3.9'

services:
  crawler:
    image: basic_image_crawler
    build: crypto_sentiment_demo_app/crawler
    command: python3 -m crypto_sentiment_demo_app.crawler.crawler
    volumes:
      - ./:/root
    profiles:
      - production
    depends_on:
      - db
    networks:
      - postgres

  model_inference_api:
    image: basic_image_model_fast_api
    build: crypto_sentiment_demo_app/model_inference_api
    command: uvicorn crypto_sentiment_demo_app.model_inference_api.api.model:app --host model_inference_api --port 8001 --reload
    volumes:
      - ./:/root
    ports:
      - "8001:8001"
    hostname: model_inference_api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://model_inference_api:8001/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    profiles:
      - production
    networks:
      - model_inference

  model_scorer:
    image: basic_image_model_scorer
    build: crypto_sentiment_demo_app/model_scorer
    command: python3 -m crypto_sentiment_demo_app.model_scorer.model_scorer
    volumes:
      - ./:/root
    depends_on:
      model_inference_api:
        condition: service_healthy
    depends_on:
      - crawler
      - db
    links:
      - model_inference_api
    profiles:
      - production
    networks:
      - model_inference
      - postgres

  data_provider:
    image: basic_image_data_provider
    build: crypto_sentiment_demo_app/data_provider
    command: uvicorn crypto_sentiment_demo_app.data_provider.api:app --host data_provider --port 8002 --reload
    ports:
      - "8002:8002"
    volumes:
      - ./:/root
    hostname: data_provider
    healthcheck:
      test: ["CMD", "curl", "-f", "http://data_provider:8002/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    profiles:
      - production
    networks:
      - data_provider
      - postgres

  frontend:
    image: basic_image_streamlit
    build: crypto_sentiment_demo_app/frontend
    command: streamlit run crypto_sentiment_demo_app/frontend/streamlit_app.py
    ports:
      - "8501:8501"
    volumes:
      - ./:/root
    depends_on:
      model_inference_api:
        condition: service_healthy
      data_provider:
        condition: service_healthy
    links:
      - model_inference_api
      - data_provider
    profiles:
      - production
    networks:
      - model_inference
      - data_provider

  train:
    image: basic_image_train
    build:
      context: crypto_sentiment_demo_app/train
      args:
        USER_ID: "$USER"
        GROUP_ID: "$GROUP"
      dockerfile: Dockerfile-cpu
    command: python3 crypto_sentiment_demo_app/train/train.py
    depends_on:
      - minio
      - mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    networks:
      - mlflow
    volumes:
      - ./:/root
    profiles:
      - train

  db:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - ./db_setup/postgres:/data/postgres
      - ./db_setup/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    ports:
      - "8432:5432"
    profiles:
      - production
    networks:
      - postgres

  pgadmin:
      container_name: pgadmin
      image: dpage/pgadmin4
      restart: always
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        PGADMIN_CONFIG_SERVER_MODE: "False"
        PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      volumes:
        - ./db_setup/pgadmin/:/var/lib/pgadmin
        - ./db_setup/docker_pgadmin_servers.json:/pgadmin4/servers.json
      ports:
        - "8050:80"
      profiles:
        - production
      networks:
        - postgres
      entrypoint:
        - "/bin/sh"
        - "-c"
        - "/bin/echo 'postgres:5432:*:${POSTGRES_USER}:${POSTGRES_PASSWORD}' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"

  minio:
    container_name: minio
    hostname: minio
    image: quay.io/minio/minio:RELEASE.2022-05-08T23-50-31Z
    command: server --console-address ":9001" /data/
    expose:
      - "9000"
      - "9001"
    networks:
      - s3      
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}        
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./minio/:/data
      
  nginx:
    image: nginx:1.19.2-alpine
    container_name: nginx
    hostname: nginx
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - s3
    depends_on:
      - minio

  mlflow:
    restart: always
    build: crypto_sentiment_demo_app/mlflow_server
    container_name: mlflow_server
    hostname: mlflow
    ports:
      - "5000:5000"
    networks:
      - postgres
      - s3
      - mlflow
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
    command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}/${POSTGRES_DB} --default-artifact-root s3://${AWS_S3_BUCKET}/ --host 0.0.0.0

networks:
  postgres:
    driver: bridge
  s3:
    driver: bridge
  model_inference:
    driver: bridge
  data_provider:
    driver: bridge
  mlflow:
    driver: bridge

volumes:
  postgres:
  minio:
